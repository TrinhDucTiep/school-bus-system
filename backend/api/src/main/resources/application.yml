app:
  cors:
#    allowed-origins: "*"
    allowed-origins: http://localhost:3000

spring:
  application:
    name: api
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${SQL_DB_HOST}:${SQL_DB_PORT}/${POSTGRES_DB}
    username: ${SQL_DB_USER}
    password: ${SQL_DB_PASS}
    hikari: # reference: https://github:com/brettwooldridge/HikariCP#configuration-knobs-baby:
      maxLifetime: 30000
      leakDetectionThreshold: 30000
  jpa:
    generate-ddl: true
    show-sql: true
    properties:
      hibernate:
        jdbc:
          batch_size: 50
          time_zone: UTC
        format_sql: true
        order_inserts: true
        ddl-auto: create
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: https://erp3.soict.ai/iam/realms/OpenERP-Dev/protocol/openid-connect/certs
  jmx:
    enabled: false
  cache:
    type: redis
  redis:
    host: localhost
    port: 6379
    password:
    expiretime: 12
  jackson:
    serialization:
      FAIL_ON_EMPTY_BEANS: false
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
  mvc:
    throw-exception-if-no-handler-found: true
  data:
    redis:
      repositories:
        enabled: false
    rest:
      #base-path: /rest
      detection-strategy: ANNOTATED
    mongodb:
      uri: mongodb://localhost:27017,localhost:27018,localhost:27019
      replicaSet: rs0
      database: baseweb

server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: '/api'

management:
  metrics:
    distribution:
      percentiles[http.server.requests]: 0.5, 0.90, 0.95, 0.99
      percentiles-histogram[http.server.requests]: true
      slo[http.server.requests]: 100ms, 250ms, 500ms, 1s, 2s, 5s, 10s, 30s

      percentiles[http.client.requests]: 0.5, 0.90, 0.95, 0.99
      percentiles-histogram[http.client.requests]: true
      slo[http.client.requests]: 100ms, 250ms, 500ms, 1s, 2s, 5s, 10s, 30s
      percentiles-histogram:
        http:
          server:
            requests: true
  endpoints:
    web:
      exposure:
        include:
          - "health"
          - "metrics"
          - "prometheus"
          - "info"
    prometheus:
      enabled: true
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
    prometheus:
      enabled: true
  otlp:
    metrics:
      export:
        url: ${OTLP_EXPORT_URL:http://localhost:4318/v1/metrics}
        step: 10s
    tracing:
      endpoint: ${OTLP_TRACE_URL:http://localhost:4318/v1/traces}
      export:
        step: 10s # Export interval set to 10 seconds
    tags: #from this i try
      application: app
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: 'true'
  tracing:
    sampling:
      probability: 1.0
  prometheus:
    metrics:
      export:
        enabled: true

#logging:
#  level:
#    org.apache.kafka.clients.NetworkClient: ERROR # turn-off kafka client logging
#    com:
logging:
  level:
    org:
      springframework: INFO
      springframework.security: TRACE

kafka:
   addresses: ${KAFKA_ADDRESSES:localhost:9092}
   example-topic: ${KAFKA_EXAMPLE_TOPIC:example-topic}